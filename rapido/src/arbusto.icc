Arbusto::Arbusto() {}

Arbusto::Arbusto(TFile* new_tfile, TChain* tchain, std::vector<TString> branch_names, bool remove_branches) 
: remove_branches(remove_branches), branch_names(branch_names)
{
    // If remove_branches is true, this inverts the selection to drop the listed branches
    tfile = new_tfile;
    // Disable all branches
    tchain->SetBranchStatus("*", remove_branches); 
    // Enable selected branches
    for (auto branch_name : branch_names)
    {
        tchain->SetBranchStatus(branch_name, !remove_branches);
    }
    ttree = (TTree*)tchain->CloneTree(0);
}

Arbusto::Arbusto(HEPCLI& cli, std::vector<TString> branch_names) 
: branch_names(branch_names)
{
    tfile = new TFile(TString(cli.output_dir+"/"+cli.output_name+".root"), "RECREATE");
    // Disable all branches
    cli.input_tchain->SetBranchStatus("*", 0); 
    // Enable selected branches
    for (auto branch_name : branch_names)
    {
        cli.input_tchain->SetBranchStatus(branch_name, 1);
    }
    ttree = (TTree*)cli.input_tchain->CloneTree(0);
}

Arbusto::~Arbusto() 
{
    std::map<TString, Utilities::Dynamic*>::iterator iter;
    for(iter = branches.begin(); iter != branches.end(); ++iter)
    {
        delete (*iter).second;
    }

    branches.clear();
}

void Arbusto::init(TTree* next_ttree)
{
    // Disable all branches
    next_ttree->SetBranchStatus("*", remove_branches); 
    // Enable selected branches
    for (auto branch_name : branch_names)
    {
        next_ttree->SetBranchStatus(branch_name, !remove_branches);
    }
    next_ttree->CopyAddresses(ttree);
    orig_ttree = next_ttree;
}

void Arbusto::fill(int entry)
{
    orig_ttree->GetEntry(entry);
    ttree->Fill();
    return;
}
